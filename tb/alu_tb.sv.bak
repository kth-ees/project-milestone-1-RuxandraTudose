module alu_tb;

  parameter BW = 4; // bitwidth

  logic unsigned [BW-1:0] in_a;
  logic unsigned [BW-1:0] in_b;
  logic             [3:0] opcode;
  logic unsigned [BW-1:0] out;
  logic             [2:0] flags; // {overflow, negative, zero}

  // Instantiate the ALU
  alu #(BW) dut (
    .in_a(in_a),
    .in_b(in_b),
    .opcode(opcode),
    .out(out),
    .flags(flags)
  );

  // Generate stimuli to test the ALU
  initial begin

  //avoid tedious testing
    /*in_a = 4'b0011; //3
    in_b = 4'b1011; //-5
    for (int i=0; i < 8; i++) begin
	      opcode = i;
        #10ns;
    end*/

  //use randomized signals
  repeat(5) begin
	   in_a = $urandom;
	   in_b = $urandom;
	   for (int i=0; i < 8; i++) begin
		    opcode = i;
        #10ns;
   	  end
	    #20ns;
    end

  end
endmodule
